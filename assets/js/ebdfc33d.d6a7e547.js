"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[9637],{110:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>r,default:()=>u,frontMatter:()=>s,metadata:()=>a,toc:()=>l});var o=t(5893),i=t(1151);const s={},r="#todo list",a={id:"confy/internal/todo",title:"#todo list",description:"todo list",source:"@site/../docs/confy/50_internal/98_todo.md",sourceDirName:"confy/50_internal",slug:"/confy/internal/todo",permalink:"/confy/internal/todo",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:98,frontMatter:{},sidebar:"confy",previous:{title:"Design Notes",permalink:"/confy/internal/design"},next:{title:"#wip features",permalink:"/confy/internal/WIP"}},c={},l=[];function d(e){const n={code:"code",h1:"h1",hr:"hr",pre:"pre",...(0,i.a)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h1,{id:"todo-list",children:"#todo list"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-md",children:"# TODO:\n- [ ] Nim: docgen task -> remove hardcoded repository. Add cfg.gitURL variable\n- [ ] Nim: test   task:\n  - [ ] Should create and run with confy.BuildTrg instead of just nimc\n  - [ ] Test template support inside build.nim. Allows to quickly declare a test with ergonomic syntax.\n- [ ] windres with zig cc  (milestone feature for zig 0.11/0.12, request accepted on 2022.apr.09. https://github.com/ziglang/zig/issues/9564)\n**Less important, but todo**:\n- [ ] More examples:\n  - [ ] Advanced usage\n- [ ] [c,cpp] Port the make-to-confy translator refactor into confy _(was never included)_\n- [ ] [c,cpp] Fallback set of cc/ld flags, for both debug/release modes. (currently only supports one set without optimizations)\n      You can specify your flags, add the defaults explicitly, or just don't specify and use the fallback when omitted.  \n- [ ] command line command parsing (for pkg-config, etc)   (note: windows with pkg-config-lite maybe?)\n- [ ] fix: make-to-confy missing ld flags\n"})}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-md",children:'# Done:\n- [x] nim: Support for the `cpp` nimc backend\n- [x] fix: Force-rebuild option for zigcc/zigcpp. Do not rebuild every time (becomes really repetitive to wait for them, even if short)\n- [x] chg: Silence all hint config options for zigcc/zigcpp/build, unless verbose\n- [x] fix: need to force rebuild\n- [x] new: StaticLibrary build\n- [x] all: Keyword support. Select object to build by keyword sent from CLI\n  - [x] Keyword.all\n  - [x] Nim: Keyword.examples\n  - [x] Nim: Keyword.tests\n- [x] all: Tasks support\n  - [x] Arbitrary User-defined tasks. Allows user-declared (project-specific) tasks like `clean`, etc  \n  - [x] Nim: Task.docgen\n  - [x] Nim: Task.push\n- [x] Options/arguments auto parser  (to avoid the user needing to implement parsing the info themselves)\n  - [x] Short option arguments\n  - [x] Long option arguments (variables) support   `key=val`\n  - [x] Arguments (non-files always interpreted as keywords)\n- [x] Nim: Nimble-like `require "package"`\n  - [x] in confy/nims caller script\n  - [x] in build.nim\n- [x] Nim: Examples template support inside build.nim. Allows to quickly declare an example with ergonomic syntax.\n- [x] Nim: Fully verbose example, changing everything that can be changed.\n- [x] Nim: Support for sending extra arguments to the compiler.\n- [x] cfg: New configuration option:  `cfg.zigSystemBin`  (default:on)\n         : ZigCC uses the system\'s `zig` command when `cfg.zigSystemBin = on`.\n         : When off, a local-only version is downloaded and used for the project like before.\n- [x] Nim: zigcc and zigcpp aliases:\n  - [x]  : Now call for the system\'s `zig` command when `cfg.zigSystemBin = on`\n  - [x]  : Are ordered to rebuild every run (in case the project is moved or the config options change).\n         : Its a tiny file, so this process consumes less than a second in total.\n- [x] Cross compilation for Nim, with the same Zig-confy toolchain\n- [x] Nim code support (with ZigCC)\n- [x] cfg: custom build filename when calling for the confy task \n         : (was default "build.nim", configurable from the `cfg.file` variable, but can be any name when calling the confy task)\n- [x] Remote folders _(same concept as Repositories in SCons)_\n- [x] make-to-confy: Generation of confy globs, diffs and reference code lists for each target\n- [x] make-to-confy: Converter\n- [x] SharedLibrary build\n- [x] Per-file formatted progress bar for binaries on quiet\n- [x] Correctly select `C` or `C++` compiler inside a seq (found for each file, instead of globally for the whole list)\n- [x] BuildInfo report when not quiet (if not quiet)\n- [x] Zig compiler:\n  - [x] Automatic download into the configured `cfg.binDir` folder.\n  - [x] Automatic updates from the latest stable version.\n  - [x] C and C++ support\n  - [x] Nim support\n- [x] partial compiles: file cache database (sqlite3)\n- [x] multi-object build\n- [x] strip final binary on release vers\n      (user sends the flags: `-Wl,-s`, `-strip-debug`, `-s`, etc, since its compiler-dependent)\n- [x] ld.flags input support\n- [x] cc.flags input support\n- [x] support for grabbing all files contained in a folder (aka glob)\n- [x] autocreate subdirs to compile into\n- [x] multi-file build\n'})}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-md",children:"**Maybes**:\n- [ ] Libs management as git.Submodules\n"})})]})}function u(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},1151:(e,n,t)=>{t.d(n,{Z:()=>a,a:()=>r});var o=t(7294);const i={},s=o.createContext(i);function r(e){const n=o.useContext(s);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),o.createElement(s.Provider,{value:n},e.children)}}}]);