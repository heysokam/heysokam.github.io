"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[7835],{1558:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>s,default:()=>u,frontMatter:()=>o,metadata:()=>l,toc:()=>d});var r=t(5893),i=t(1151);const o={},s="#wip features",l={id:"confy/internal/WIP",title:"#wip features",description:"wip features",source:"@site/../docs/confy/50_internal/99_WIP.md",sourceDirName:"confy/50_internal",slug:"/confy/internal/WIP",permalink:"/confy/internal/WIP",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:99,frontMatter:{},sidebar:"confy",previous:{title:"#todo list",permalink:"/confy/internal/todo"}},a={},d=[{value:"Keywords",id:"keywords",level:2}];function c(e){const n={blockquote:"blockquote",br:"br",code:"code",em:"em",h1:"h1",h2:"h2",p:"p",pre:"pre",strong:"strong",...(0,i.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h1,{id:"wip-features",children:"#wip features"}),"\n",(0,r.jsx)(n.h2,{id:"keywords",children:"Keywords"}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.em,{children:"WIP: this section needs a better explanation"})}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-nim",children:"make debug\nmake mytarget\nmake clean\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"debug"})," ",(0,r.jsx)(n.code,{children:"clean"})," ",(0,r.jsx)(n.code,{children:"mytarget"})," etc... are all ",(0,r.jsx)(n.strong,{children:"Keywords"}),(0,r.jsx)(n.br,{}),"\n","In confy, those keywords are defined when you call to build the target",(0,r.jsx)(n.br,{}),"\n","If you say:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-nim",children:'bin.build( keywords = @["thing", "otherkeyword"], run=true )\n'})}),"\n",(0,r.jsxs)(n.p,{children:["That means you ",(0,r.jsx)(n.em,{children:"need"})," to call the confy builder with that keyword, otherwise it wont build that target because its filtered away.",(0,r.jsx)(n.br,{}),"\n","To trigger that keyword manually, you would have to say ",(0,r.jsx)(n.code,{children:"build.exe thing"})," or ",(0,r.jsx)(n.code,{children:"build.exe otherkeyword"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["Currently ",(0,r.jsx)(n.em,{children:"(v0.1.7)"})," the ",(0,r.jsx)(n.code,{children:"confy/nimble"})," file does not pass keywords into the builder. Only the ",(0,r.jsx)(n.code,{children:"confy/nims"})," task does.",(0,r.jsx)(n.br,{}),"\n","Easiest way to work around this with nimble is to remove the keywords field and use version >= 0.1.7,",(0,r.jsx)(n.br,{}),"\n","which adds an implied ",(0,r.jsx)(n.code,{children:'"all"'})," keyword that runs when you don't specify anything:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-nim",children:'var bin = Program.new("my/source/file.nim", "mytarget")\nbin.build( run=true )  # <-- automatically implied:   keywords = @["all", "mytarget"]\n\n# Build it with:\n#>  ./bin/build.exe               <-- Implied "all"\n#>  ./bin/build.exe all           <-- Explicit "all"\n#>  ./bin/build.exe mytarget      <-- Explicit target name\n'})})]})}function u(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},1151:(e,n,t)=>{t.d(n,{Z:()=>l,a:()=>s});var r=t(7294);const i={},o=r.createContext(i);function s(e){const n=r.useContext(o);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),r.createElement(o.Provider,{value:n},e.children)}}}]);