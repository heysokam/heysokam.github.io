"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[1987],{9255:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>a,contentTitle:()=>s,default:()=>d,frontMatter:()=>r,metadata:()=>c,toc:()=>l});var t=o(5893),i=o(1151);const r={pagination_next:null},s="Configuration API",c={id:"confy/config",title:"Configuration API",description:"To change any of these options:",source:"@site/docs/confy/49_config.md",sourceDirName:"confy",slug:"/confy/config",permalink:"/confy/config",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:49,frontMatter:{pagination_next:null},sidebar:"confy",previous:{title:"What's Next",permalink:"/confy/gettingStarted/next"}},a={},l=[];function f(e){const n={a:"a",admonition:"admonition",br:"br",code:"code",h1:"h1",p:"p",pre:"pre",...(0,i.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"configuration-api",children:"Configuration API"}),"\n",(0,t.jsx)(n.admonition,{title:"howto",type:"note",children:(0,t.jsxs)(n.p,{children:["To change any of these options:",(0,t.jsx)(n.br,{}),"\n","Add ",(0,t.jsx)(n.code,{children:"cfg.theVariable = value"})," at the top of your ",(0,t.jsx)(n.code,{children:"build.nim"})," file."]})}),"\n",(0,t.jsx)(n.admonition,{type:"warning",children:(0,t.jsxs)(n.p,{children:["This list might not be fully in sync.",(0,t.jsx)(n.br,{}),"\n","Refer to @",(0,t.jsx)(n.a,{href:"https://github.com/heysokam/confy/tree/master/src/confy/cfg.nim",children:"confy/cfg.nim"})," if something is not quite right."]})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-nim",children:"import confy\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-nim",children:'# General\ncfg.verbose      = off          ## Makes the cli output information completely verbose. (for debugging)\ncfg.quiet        = on           ## Makes the cli output information to be as minimal as possible.  (for cleaner cli output)  (default: on)\ncfg.fakeRun      = off          ## Everything will run normally, but commands will not really be executed if set to `on`.\ncfg.cores        = 0.8 * cores  ## Total cores to use for compiling.  (default = 80% of max)\ncfg.prefix       = "confy: "    ## Prefix that will be added at the start of every command output.\ncfg.tab          = "     : "    ## Tab that will be added at the start of every new line belonging to the same message.\n'})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-nim",children:'# Folders\ncfg.rootDir      = build/".."          ## Assumes the build.nim file output is stored inside root/bin/, so going back one gets to `REPO/*`\ncfg.srcDir       = rootDir/"src"       ## Root Folder where source code files are searched for first (source code root)\ncfg.binDir       = rootDir/"bin"       ## Root Folder where files will output (binary output root)\ncfg.libDir       = rootDir/"lib"       ## Root Folder where libraries are stored\ncfg.docDir       = rootDir/"doc"       ## Root Folder where the documentation files will go\ncfg.examplesDir  = rootDir/"examples"  ## Root Folder where the examples for the project are stored\ncfg.testsDir     = rootDir/"tests"     ## Root Folder that contains the test suite of the library/project\ncfg.cacheDir     = binDir/".cache"     ## Subfolder where the compilation cache data is output\ncfg.zigDir       = binDir/".zig"       ## Subfolder where the zig binaries will be stored\n'})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-nim",children:'# Files\ncfg.file    = "build.nim"             ## File used for storing the builder config/app. Searched for @`srcDir/cfg.file`\ncfg.zigJson = zigDir/"versions.json"  ## Zig download index json file. Will be created when the ZigCC binaries are downloaded.\n'})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-nim",children:'# Compilation\n## Flags  (see confy/flags.nim for details)\ncfg.flagsC   = cfg.flags(C)      ## C   : Preset Flags object for all warnings and errors active\ncfg.flagsCpp = cfg.flags(Cpp)    ## C++ : Preset Flags object for all warnings and errors active\n\n## Other options\ncfg.Cstr            = "CC"         ## Prefix used for formatting the quiet output calls to the Compiler.\ncfg.Lstr            = "LD"         ## Prefix used for formatting the quiet output calls to the Linker.\ncfg.zigcc.systemBin = off          ## Uses the System\'s ZigCC path when on, without downloading a new version from the web.\n\n## Nim-specific\ncfg.nim.cc      = "nim"  ## Binary to call when running nim operations.\ncfg.nim.backend = "c"    ## Builds nim applications with this backend. Will be `nim {backend} thefile.nim`\n\n### Nim-unsafe options for ZigCC\ncfg.nim.unsafe.functionPointers = off  ## Builds nim applications with the `-Wno-incompatible-function-pointer-types` flag\n'})})]})}function d(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(f,{...e})}):f(e)}},1151:(e,n,o)=>{o.d(n,{Z:()=>c,a:()=>s});var t=o(7294);const i={},r=t.createContext(i);function s(e){const n=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);