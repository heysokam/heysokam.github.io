"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[7957],{4795:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>h,frontMatter:()=>l,metadata:()=>t,toc:()=>d});var s=i(5893),r=i(1151);const l={title:"confy | Comfortable and Configurable Buildsystem"},o="Confy Quickstart Guide",t={type:"mdx",permalink:"/confy",source:"@site/src/pages/confy.md",title:"confy | Comfortable and Configurable Buildsystem",description:"Overview",frontMatter:{title:"confy | Comfortable and Configurable Buildsystem"},unlisted:!1},c={},d=[{value:"Overview",id:"overview",level:2},{value:"Basics",id:"basics",level:2},{value:"Two Files:  The Builder and the Caller",id:"two-files--the-builder-and-the-caller",level:2},{value:"The Caller Script",id:"the-caller-script",level:3},{value:"The Builder App",id:"the-builder-app",level:3},{value:"Differences between C, C++ and Nim",id:"differences-between-c-c-and-nim",level:4},{value:"Nim",id:"nim",level:5},{value:"C and C++",id:"c-and-c",level:5},{value:"Other Examples",id:"other-examples",level:2},{value:"Buildsystem Customization",id:"buildsystem-customization",level:2},{value:"Keywords",id:"keywords",level:2}];function a(e){const n={a:"a",blockquote:"blockquote",br:"br",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",h5:"h5",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"confy-quickstart-guide",children:"Confy Quickstart Guide"}),"\n",(0,s.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,s.jsxs)(n.p,{children:["Confy is a Buildsystem for compiling C, C++ and Nim code.",(0,s.jsx)(n.br,{}),"\n","It is no more than an interface for calling the compilers themselves with a simpler and more ergonomic syntax.",(0,s.jsx)(n.br,{}),"\n","All it does is call ",(0,s.jsx)(n.code,{children:"CC -o myfile.exe file.c file2.c"})," with the correct options for your project,",(0,s.jsx)(n.br,{}),"\n","based on the options you define in your ",(0,s.jsx)(n.code,{children:"src/build.nim"})," file."]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.em,{children:"Important Note:"}),(0,s.jsx)(n.br,{}),"\n","Unlike other buildsystems, Confy is -not- a binary that you call.",(0,s.jsx)(n.br,{}),"\n","Confy is a ",(0,s.jsx)(n.strong,{children:"library"})," that you use from inside your Builder App.",(0,s.jsx)(n.br,{}),"\n","This is much more than a semantic difference.",(0,s.jsx)(n.br,{}),"\n","More details about this in the ",(0,s.jsx)(n.code,{children:"Builder App"})," section, and the disclaimer section @",(0,s.jsx)(n.a,{href:"https://github.com/heysokam/confy/blob/master/readme.md#disclaimer--notes",children:"the confy readme"})," file."]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"basics",children:"Basics"}),"\n",(0,s.jsxs)(n.p,{children:["Confy has sane defaults preconfigured.",(0,s.jsx)(n.br,{}),"\n","You don't need to change anything if you want to use the preconfigured project structure.",(0,s.jsx)(n.br,{}),"\n","That said, if you want a different setup, you can have it by changing the options described in the @",(0,s.jsx)(n.a,{href:"https://github.com/heysokam/confy/tree/master/doc/config.md",children:"config.md"})," doc file."]}),"\n",(0,s.jsx)(n.p,{children:"A simple build file you could look like:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-nim",children:'import confy\n\nlet code = srcDir.glob()   # Get our source by grabbing all code from the `srcDir` folder\nvar bin  = Program.new(    # Build an executable program\n  src = code,              # Define our source code\n  trg = "hello",           # Define our binary\n)\n\nbin.build()                # Order to build\n'})}),"\n",(0,s.jsx)(n.p,{children:"With this setup, your binary will:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-md",children:"- Find its source code files by taking all `.c` files inside the `ROOT/src` folder\n- Output the resulting binary into:\n  - Folder      : `confy.cfg.binDir`, which is `ROOT/bin`.\n  - Binary name : `hello.exe` on windows, `hello` on linux, `hello.app` on mac\n"})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["This means that your application will be output to: ",(0,s.jsx)(n.code,{children:"ROOT/bin/hello.exe"})]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"two-files--the-builder-and-the-caller",children:"Two Files:  The Builder and the Caller"}),"\n",(0,s.jsxs)(n.p,{children:["Confy is ",(0,s.jsx)(n.strong,{children:"VERY"})," different to make-like buildsystems. In a big way.",(0,s.jsx)(n.br,{}),"\n","With confy, the buildsystem binary is ",(0,s.jsx)(n.strong,{children:"yours"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["You control its flow.",(0,s.jsx)(n.br,{}),"\n","You decide when you want to ",(0,s.jsx)(n.code,{children:"MyTarget.build()"}),",",(0,s.jsx)(n.br,{}),"\n","or when you want to do some low level systems programming/coding before any of that, if you so desire.",(0,s.jsx)(n.br,{}),"\n","You can do whatever you want. The builder application is yours."]}),"\n",(0,s.jsx)(n.p,{children:"This is why you need two files to setup your project:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Builder"}),": Where you define how to build your project.",(0,s.jsx)(n.br,{}),"\n",(0,s.jsx)(n.code,{children:"REPO/src/build.nim"})]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Caller"}),": Where you define how to build the builder itself.",(0,s.jsx)(n.br,{}),"\n",(0,s.jsx)(n.code,{children:"REPO/projectname.nimble"})," or ",(0,s.jsx)(n.code,{children:"REPO/confy.nims"})]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Important"}),":",(0,s.jsx)(n.br,{}),"\n","Like everything else in confy, you don't ",(0,s.jsx)(n.code,{children:"need"})," these defaults.",(0,s.jsx)(n.br,{}),"\n","The only required part is that you build a binary that uses the confy functions and config options.",(0,s.jsx)(n.br,{}),"\n","This setup is here just to make things easy and ergonomic to use."]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"the-caller-script",children:"The Caller Script"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsxs)(n.em,{children:["(aka ",(0,s.jsx)(n.code,{children:"./project.nimble"})," or ",(0,s.jsx)(n.code,{children:"./confy.nims"}),")"]})}),"\n",(0,s.jsxs)(n.p,{children:["The Caller Script is a simple ",(0,s.jsx)(n.code,{children:"nimscript"})," file that asks nim to compile your builder."]}),"\n",(0,s.jsx)(n.p,{children:"The most minimal Caller Script file possible would be:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-nim",children:"include confy/nims\nconfy()\n"})}),"\n",(0,s.jsx)(n.p,{children:"That's it, really. The rest is just convenience."}),"\n",(0,s.jsx)(n.p,{children:"To build the project you have two options:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Run ",(0,s.jsx)(n.code,{children:"nim confy.nims"})]}),"\n",(0,s.jsxs)(n.li,{children:["Create a nimble task so you can build by running ",(0,s.jsx)(n.code,{children:"nimble confy"}),":","\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-nim",children:'version = "0.1.0"\nauthor  = "Someone"\n# ...\n# other nimble related config here\n# ...\n\ntask confy, "This task will build the project with confy":\n  requires "https://github.com/heysokam/confy#head"\n  exec "nim confy.nims"\n'})}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["Note:",(0,s.jsx)(n.br,{}),"\n","Just like with the ",(0,s.jsx)(n.code,{children:"example.nims"})," file, this is just convenience.",(0,s.jsx)(n.br,{}),"\n","The file can be called anything you want. It has no requirements.",(0,s.jsx)(n.br,{}),"\n","Just call the ",(0,s.jsx)(n.code,{children:"confy()"})," function from nimscript and you are good to go."]}),"\n"]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["Important:",(0,s.jsx)(n.br,{}),"\n","You can build your ",(0,s.jsx)(n.code,{children:"build.nim"})," Builder App however else you want.",(0,s.jsx)(n.br,{}),"\n","All the ",(0,s.jsx)(n.code,{children:"confy()"})," function does is provide some sane preconfigured defaults for you to make it easier to run the Builder."]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"the-builder-app",children:"The Builder App"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsxs)(n.em,{children:["(aka ",(0,s.jsx)(n.code,{children:"./src/build.nim"}),")"]})}),"\n",(0,s.jsxs)(n.p,{children:["The Builder App is the actual application that will build your project.",(0,s.jsx)(n.br,{}),"\n","This is the only required part of confy.",(0,s.jsx)(n.br,{}),"\n","Compile the Builder App and run it. That's it."]}),"\n",(0,s.jsxs)(n.p,{children:["Following the trend of minimalism, lets make the previous example ",(0,s.jsx)(n.code,{children:"src/build.nim"})," file even simpler:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-nim",children:'import confy\nProgram.new( @["src/mycode.c"], "hello" ).build()\n'})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"That's all. The other options are just for changing the defaults."}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["You can build this file in whatever way you want, and running it will build your code as expected.",(0,s.jsx)(n.br,{}),"\n","The easiest way to do this is with the ",(0,s.jsx)(n.a,{href:"#the-caller-script",children:"Caller Script setup"})," described in the prev secion."]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsxs)(n.em,{children:["Alternative: Build+Run with ",(0,s.jsx)(n.code,{children:"nim c -r src/build"})]})}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"differences-between-c-c-and-nim",children:"Differences between C, C++ and Nim"}),"\n",(0,s.jsxs)(n.p,{children:["C/C++ are built exactly the same, and Nim compiles into C.",(0,s.jsx)(n.br,{}),"\n","The only difference between them is the files you send into the ",(0,s.jsx)(n.code,{children:"src"})," variable."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-nim",children:'# If you want to build a Nim app:\nlet code = @[ srcDir/"myfile.nim" ]\n\n# If you want to build a C app with only one file:\nlet code = @[ srcDir/"myfile.c" ]\n\n# If you want to build a C++ app with only one file:\nlet code = @[ srcDir/"myfile.cpp" ]\n'})}),"\n",(0,s.jsx)(n.h5,{id:"nim",children:"Nim"}),"\n",(0,s.jsxs)(n.p,{children:["Nim has module dependency resolution.",(0,s.jsx)(n.br,{}),"\n","The only uniqueness for building Nim is that you can only send one ",(0,s.jsx)(n.code,{children:".nim"})," file for each object you build."]}),"\n",(0,s.jsx)(n.h5,{id:"c-and-c",children:"C and C++"}),"\n",(0,s.jsxs)(n.p,{children:["In C and C++ you will need to send all of your source files, because the compiler doesn't understand dependency resolution.",(0,s.jsx)(n.br,{}),"\n","The ",(0,s.jsx)(n.code,{children:'SomeFolder.glob(".ext")'})," function is created so that you don't need to explicitly list all files in your project manually,",(0,s.jsx)(n.br,{}),"\n","and -also- maintain the list manually ",(0,s.jsx)(n.em,{children:"(which is a PITA, time consuming, and extremely error and bug prone)"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["That said, you can also explicitely list the files manually if you so desire.",(0,s.jsx)(n.br,{}),"\n","This works for the same for both C and C++ files:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-nim",children:'let code = @[\n  "./mycode/file1.c",\n  "./myother/file2.c",\n  "./otherfolder/file4.c",\n  # ... list 100 other files one by one in here ...\n  ]\n'})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.em,{children:"I would never recommend this, but... your project, your rules."})}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"other-examples",children:"Other Examples"}),"\n",(0,s.jsxs)(n.p,{children:["More ways to configure the buildsystem are shown @",(0,s.jsx)(n.a,{href:"https://github.com/heysokam/confy/tree/master/examples",children:"the examples"})," folder.",(0,s.jsx)(n.br,{}),"\n","You can use those projects as templates for a new project, or just use them as inspiration instead."]}),"\n",(0,s.jsx)(n.h2,{id:"buildsystem-customization",children:"Buildsystem Customization"}),"\n",(0,s.jsxs)(n.p,{children:["All the configuration variables are stored @",(0,s.jsx)(n.a,{href:"https://github.com/heysokam/confy/tree/master/src/confy/cfg.nim",children:"confy/cfg.nim"}),".",(0,s.jsx)(n.br,{}),"\n","To change them, just add ",(0,s.jsx)(n.code,{children:"cfg.theVariable = value"})," at the top of your ",(0,s.jsx)(n.code,{children:"build.nim"})," file."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-nim",children:'import confy\ncfg.srcDir  = "./code"\ncfg.binDir  = "./build"\ncfg.verbose = off\ncfg.quiet   = on\n'})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["See the @",(0,s.jsx)(n.a,{href:"https://github.com/heysokam/confy/tree/master/doc/config.md",children:"config.md"})," doc file, or @",(0,s.jsx)(n.a,{href:"https://github.com/heysokam/confy/tree/master/src/confy/cfg.nim",children:"confy/cfg.nim"})," for the complete list of variables that can be modified."]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"keywords",children:"Keywords"}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.em,{children:"WIP: this section needs a better explanation"})}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-nim",children:"make debug\nmake mytarget\nmake clean\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"debug"})," ",(0,s.jsx)(n.code,{children:"clean"})," ",(0,s.jsx)(n.code,{children:"mytarget"})," etc... are all ",(0,s.jsx)(n.strong,{children:"Keywords"}),(0,s.jsx)(n.br,{}),"\n","In confy, those keywords are defined when you call to build the target",(0,s.jsx)(n.br,{}),"\n","If you say:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-nim",children:'bin.build( keywords = @["thing", "otherkeyword"], run=true )\n'})}),"\n",(0,s.jsxs)(n.p,{children:["That means you ",(0,s.jsx)(n.em,{children:"need"})," to call the confy builder with that keyword, otherwise it wont build that target because its filtered away.",(0,s.jsx)(n.br,{}),"\n","To trigger that keyword manually, you would have to say ",(0,s.jsx)(n.code,{children:"build.exe thing"})," or ",(0,s.jsx)(n.code,{children:"build.exe otherkeyword"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["Currently ",(0,s.jsx)(n.em,{children:"(v0.1.7)"})," the ",(0,s.jsx)(n.code,{children:"confy/nimble"})," file does not pass keywords into the builder. Only the ",(0,s.jsx)(n.code,{children:"confy/nims"})," task does.",(0,s.jsx)(n.br,{}),"\n","Easiest way to work around this with nimble is to remove the keywords field and use version >= 0.1.7,",(0,s.jsx)(n.br,{}),"\n","which adds an implied ",(0,s.jsx)(n.code,{children:'"all"'})," keyword that runs when you don't specify anything:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-nim",children:'var bin = Program.new("my/source/file.nim", "mytarget")\nbin.build( run=true )  # <-- automatically implied:   keywords = @["all", "mytarget"]\n\n# Build it with:\n#>  ./bin/build.exe               <-- Implied "all"\n#>  ./bin/build.exe all           <-- Explicit "all"\n#>  ./bin/build.exe mytarget      <-- Explicit target name\n'})})]})}function h(e={}){const{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(a,{...e})}):a(e)}},1151:(e,n,i)=>{i.d(n,{Z:()=>t,a:()=>o});var s=i(7294);const r={},l=s.createContext(r);function o(e){const n=s.useContext(l);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function t(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),s.createElement(l.Provider,{value:n},e.children)}}}]);